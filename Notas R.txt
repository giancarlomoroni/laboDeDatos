	str() te da info de la variable
exp(1) es el numero e, y el argumento es a que va a estar elevado
log(5, base =)
rm(variable del sistema) resetea la variable a su valor por default.

rep(x, times =, length.out =) x puede ser un numero o un vector, y lo mismo times. Si times es un vector debe ser del mismo largo que x
	ya que lo que vas a indicar es cuanto se repite cada elemento individualmente.
	length.out te especifica el largo del vector final, cuantas reps en total

seq(inicio,fin,step)

operador num %in% variable, devuelve un booleano de si el num esta en variable 

primes[condicion de primes] se queda con los valores q cumplan aquella condicion

which(condicion) devuelve los indices de los TRUE, la condicion debe ser un vector logico.

--DataFrames
Las variables son las columnas y cada fila son los distintas objetos
puedo acceder como una matriz o puedo
data[5] -- selecciona la columna 5 entera
data[[5]] -- te devuelve un vector con esas columnas
data[fila,columna]
data[1:ncol] selecciono todo el dataframe
data[,columna] selecciono la columna entera como vector, puede ser tambien como data$nombreCol o data[,nombreCol].

--El $ y el [[]] son lo mismo lo que devuelve es el tipo de elemento por lo que esta formado, en un dataFrame te devuelve un vector si
seleccionas una columna.

para quedarte con una porcion del dataframe podes data[condicion sobre cada fila,] y te quedas
con los samples que la cumplen. 
puedo sacar una fila como data[-c(1),-c(1)]
rbind(dataFrame,nuevo dataFrame con rows para agregar)
cbind(dataframe,nuevo dataFrame con cols para agregar)
length(dataFrame) -> tamano de columnas
ncol y nrow te dice la cantidad correspondiente
names(datos) te da colnames
rownames(datos)


--Funcion Factor
factor(columna, levels = los actuales, labels = los que quiero clasificar)
lo que hace te clasifica en grupos llamados levels()

music_genre <- factor(c("Jazz", "Rock", "Classic", "Classic", "Pop", "Jazz", "Rock", "Jazz"))
music genre tiene jazz rock classic pop que son las 4 levels
levels(music_genre)


--Clase 2 - Los Datos

setwd() seteas el directorio de trabajo del proyecto para cargar archivos.
read.table("/media/clinux01/UBUNTU 22_0/autos.txt", header = TRUE) --Cargar txt con nombre de columnas
read.csv() -- cargar csv

sort(v) sortea el vector
order(v) devuelve un vector con los indices de los elementos en orden (ej: sort(c(3,4,1)) devuelve 3 1 2 --Sirve para reordenar filas en un df.
rank(v) devuelve un vector que en la posicion de cada elemento tiene su "rango" en el vector ordenado, osea donde esta el segundo elemento mas grande pone un 2

apply(matriz, margen, funcion) aplica la funcion a todos los elementos, margen = 1 indica filas, margen 2 indica columnas y margen c(1,2) indica ambas (ej sumar todas las columnas apply(matrix,2,sum))
Para DataFrames usar Sapply y para listas lapply.
Si queremos usar argumentos de la funcion en si, vamos a utilizar los ... del apply para esto
apply(x,margin,funcion,argumento1=,argumento2=,names = false) names = false es para que no aparezcan los nombres de la lista.

sample(rango de valores, cantidad de muestras al azar, replace = booleano) el replace es si queremos que se repitan los rangos de valores.
set.seed() para usar sample
vector letters que tiene todos los caracteres del abecedario

--paste0(argumento1,argumento2) Si alguno de los argumentos es un vector, se hara termino a termino, si son strings se concatenan al final. Es para Strings unicamente
Ejemplos
> paste0('hola', 1:5)
[1] "hola1" "hola2" "hola3" "hola4" "hola5"

> paste0(1:12, 5)
 [1] "15"  "25"  "35"  "45"  "55"  "65"  "75"  "85"  "95"  "105" "115" "125"

nchar(string) te devuelve el largo del string.
runif(cantidad, min,max) te devuelve la cantidad de numeros random tipo float
is.numeric() te dice si son numeros
is.na() analiza todos los elementos y devuelve un solo valor de verdad
in.na.data.frame() devuelve una matriz con los valores de verdad uno a uno

--Markdown


#Titulo
##Subtitulo
*negrita*
_italica_
Agregar new code en R para escribir una parte de la notebook

```{r,echo=TRUE,include=TRUE}
x<-c(1,2,3)
y<-c(2,2,5)
x
plot(x,y,pch=20)
```

echo = FAlse es para que no muestre el codigo, default es true
include = FALSE es para que no muestre la salida del codigo
$Formula matematica$
$$Formula matematica pero te la muestre$$
knit es para compilar el codigo

para una tabla linda en html :
library(rmarkdown)
paged_table(astro)


--Semana 2

readLines(archivo,n=numero) lee la lineas que le pases por n, si le pone n = 1 te lee los features, pero te lee el archivo para entender como esta codificado.
str(dataFrame) te cuenta informacion del dataFrame
Al pisar una variable del tipo
var <- var[logica] al correrlo varias veces lo que hace es que se va a ir pisando cada vez mas, pero el largo del vector no se modifica porque 
lo que pasa es que a medida que var se achica en tamano y logica es igual, lo que hace es que completar con NA los valores que no estan disponibles de indexar en var.

prop.table(tb) -- Tira un porcentaje de apariciones de cada elemento.

moda = which.max(table(x))
mean() -> promedio
median() -> te da la media.
range(vector) te devuelve -> (min(variable),max(variable)) generalmente sirve para detectar si hay errores
quantile(vector) devuelve los cuartiles, si le pongo un argumento me da el cuantil
quantile(vector,0.2) te da el cuantil 20, osea que te da que valor separa el 20% en valores menores y que el 80% de los datos son mayores a ese valor.
quantile(vector,que valor dejamos a izquierda)
quantile(vector,(0:10)/10) te da de a 10 en 10
el 10% y 90% del cuantil te da un mejor rango de como se mueve la variable 
Iqr() devuelve la distancia intercuartil
var() es la varianza
sd() desviacion estandar
summary(variable) te tira ciertos datos estadisticos de la variable.
plot(vector) pone en eje x el indice y en y el valor, sirve para ver si estan ordenados.


-Graficos
boxplot(array, outline = ) 	La opci√≥n outline=FALSE nos permite graficar el boxplot sin los outliers.
NA == a otra cosa, devuelve NA
is.element(array,elemento) devuelve un vector logico que te da TRUE si el elemento esta en el array y no tiene en cuenta los NA por lo tanto es bueno.
<br /> es el /n para usar en markdown
droplevels(variable factor) te saca los levels que ya no usas de una variable del tipo factor

hist(datos,main = titulo,xlab,ylab,breaks = como subdividis es un numero cualquiera, xlim)

barplot(table(dato), mismos arg que hist)

boxplot(variable continua ~ variable categorica, cex.axis = numero) cex.axis es el tamano de la letra, y el ~ siginifica un grafico (x,y) y seria como y ~ x, es una formula
donde x es meramente categorica e y una variable continua o discreta.

PARA ESCALA LOGARITMICA SE PONE plot(..,log = 'y',...)

coplot(y ~ x | categorica, rows = 1) x e y son variables continuas entonces podes separar en distintos graficos para comparar variables continuas.

Cuando tenemos un dataFrame y segmentamos una variable del tipo factor para crear otro dataframe, lo que tenemos que hacer es volverlo a factorear.



